knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
ten_km_grid   <- st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
ten_km_grid   <- st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')
two_km_grid   <- st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')
ten_km_grid   <- st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')
two_km_grid   <- st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
ten_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp'))
two_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp'))
head(two_km_grid)
two_km_grid[two_km_grid$domain == 'SARA2',]
st_transform(two_km_grid, 4326)
ten_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
two_km_grid
ten_km_grid
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
plot(ten_km_grid)
plot(st_geometry(ten_km_grid))
plot(st_geometry(two_km_grid), add=T, col='red')
rm(two_km_grid)
rm(two_km_grid, domain)
plot(two_k)
plot(two_km)
plot(two_km_grid)
getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
library(osmdata)
m <- mapview(ten_km_grid, map.types = 'Esri.WorldImagery', alpha.regions=0.1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
library(osmdata)
ten_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('C:/Users/stwb3498/Documents/Github/emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
m <- mapview(ten_km_grid, map.types = 'Esri.WorldImagery', alpha.regions=0.1)
mapshot(m, file = paste0(getwd(), "map.png"), remove_controls = c("zoomControl", "layersControl", "homeButton","scaleBar"))
webshot::install_phantomjs()
m <- mapview(ten_km_grid, map.types = 'Esri.WorldImagery', alpha.regions=0.1)
mapshot(m, file = paste0(getwd(), "map.png"), remove_controls = c("zoomControl", "layersControl", "homeButton","scaleBar"))
getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
major_roads <- c('motorway', 'motorway link', 'trunk', 'trunk link', 'primary', 'primary link', 'secondary', 'tertiary')
minor_roads <- c('residential', 'service', 'unclassified')
api_list <- c('http://overpass-api.de/api/interpreter',
'https://lz4.overpass-api.de/api/interpreter',
'https://z.overpass-api.de/api/interpreter',
'https://overpass.kumi.systems/api/interpreter')
roads_to_import <- c(major_roads, minor_roads)
i=1
for (j in 1:length(roads_to_import)){
api_to_use <- sample(1:length(api_list), 1)
set_overpass_url(api_list[api_to_use])
temp_road <- opq(bbox = st_bbox(ten_km_grid[i,])) %>%
add_osm_feature(key = 'highway', value= roads_to_import[j]) %>%
osmdata_sp()
if (nrow(temp_road$osm_lines) > 0) {
temp_road <- st_as_sf(temp_road$osm_lines)
## If columns are missing, add them. Also re-order and change to charaters where needed
if ('maxspeed' %in% names(temp_road))  {} else{temp_road$maxspeed <- NA}
if ('lanes'    %in% names(temp_road))  {} else{temp_road$lanes    <- NA}
if ('highway'  %in% names(temp_road))  {} else{temp_road$highway  <- as.character(roads_to_import[j])}
if ('osm_id'   %in% names(temp_road))  {} else{temp_road$osm_id   <- as.character(row.names(temp_road))}
temp_road <- temp_road[,c('osm_id', 'highway', 'lanes', 'maxspeed', 'geometry')]
temp_road$highway  <- as.character(temp_road$highway)
temp_road$lanes    <- as.character(temp_road$lanes)
temp_road$maxspeed <- as.character(temp_road$maxspeed)
## Bind the roads to the previous roads if they exist
if (!exists('grid_roads')) {grid_roads <- temp_road} else {grid_roads <- rbind(grid_roads, temp_road)}
grid_roads <- st_intersection(grid_roads, ten_km_grid[i,])
}
}
rm(temp_road)
plot(st_geometry(grid_roads))
grid_roads
temp_road <- opq(bbox = st_bbox(ten_km_grid)) %>%
add_osm_feature(key = 'highway', value= roads_to_import[j]) %>%
osmdata_sp()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
major_roads <- c('motorway', 'motorway link', 'trunk', 'trunk link', 'primary', 'primary link', 'secondary', 'tertiary')
minor_roads <- c('residential', 'service', 'unclassified')
api_list <- c('http://overpass-api.de/api/interpreter',
'https://lz4.overpass-api.de/api/interpreter',
'https://z.overpass-api.de/api/interpreter',
'https://overpass.kumi.systems/api/interpreter')
roads_to_import <- c(major_roads, minor_roads)
## Download the roads in that square, by road type in turn
for (j in 1:length(roads_to_import)){
api_to_use <- sample(1:length(api_list), 1)
set_overpass_url(api_list[api_to_use])
temp_road <- opq(bbox = st_bbox(ten_km_grid)) %>%
add_osm_feature(key = 'highway', value= roads_to_import[j]) %>%
osmdata_sp()
if (nrow(temp_road$osm_lines) > 0) {
temp_road <- st_as_sf(temp_road$osm_lines)
## If columns are missing, add them. Also re-order and change to charaters where needed
if ('maxspeed' %in% names(temp_road))  {} else{temp_road$maxspeed <- NA}
if ('lanes'    %in% names(temp_road))  {} else{temp_road$lanes    <- NA}
if ('highway'  %in% names(temp_road))  {} else{temp_road$highway  <- as.character(roads_to_import[j])}
if ('osm_id'   %in% names(temp_road))  {} else{temp_road$osm_id   <- as.character(row.names(temp_road))}
temp_road <- temp_road[,c('osm_id', 'highway', 'lanes', 'maxspeed', 'geometry')]
temp_road$highway  <- as.character(temp_road$highway)
temp_road$lanes    <- as.character(temp_road$lanes)
temp_road$maxspeed <- as.character(temp_road$maxspeed)
## Bind the roads to the previous roads if they exist
if (!exists('grid_roads')) {grid_roads <- temp_road} else {grid_roads <- rbind(grid_roads, temp_road)}
}
}
plot(st_geometry(grid_roads))
plot(grid_roads, add=T)
plot(ten_km_grid, add=T)
rm(temp_road)
head(grid_roads)
grid_roads          <- st_intersection(grid_roads, ten_km_grid)
head(grid_roads)
grid_roads[grid_roads$highway == 'primary'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'primary link'     & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'secondary'        & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'motorway'         & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'motorway link'    & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk'            & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk link'       & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'tertiary'         & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'residential'      & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'service'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'unclassified'     & is.na(grid_roads$lanes),'lanes'] <- 2
head(grid_roads)
grid_roads[nchar(grid_roads$maxspeed) == 6 & !is.na(grid_roads$maxspeed),'maxspeed']
grid_roads[grid_roads$highway == 'primary'          & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'primary link'     & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'secondary'        & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'motorway'         & is.na(grid_roads$maxspeed),'maxspeed'] <- 70
grid_roads[grid_roads$highway == 'motorway link'    & is.na(grid_roads$maxspeed),'maxspeed'] <- 70
grid_roads[grid_roads$highway == 'trunk'            & is.na(grid_roads$maxspeed),'maxspeed'] <- 40
grid_roads[grid_roads$highway == 'trunk link'       & is.na(grid_roads$maxspeed),'maxspeed'] <- 40
grid_roads[grid_roads$highway == 'tertiary'         & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'residential'      & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'service'          & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'unclassified'     & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
head(grid_roads)
nrow(grid_roads[is.na(grid_roads$lane)])
grid_roads[grid_roads$highway == 'primary'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'primary link'     & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'secondary'        & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'motorway'         & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'motorway link'    & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk'            & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk link'       & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'tertiary'         & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'residential'      & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'service'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'unclassified'     & is.na(grid_roads$lanes),'lanes'] <- 2
nrow(grid_roads[is.na(grid_roads$lane)])
nrow(grid_roads[is.na(grid_roads$lanes)])
head(grid_roads)
is.na(grid_roads$lanes)
nrow(grid_roads[is.na(grid_roads$lanes),])
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
ten_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/cmaq_cities_10km_grids.shp')) %>% st_transform(4326)
two_km_grid   <- suppressMessages(st_read('../emep_emissions_onto_osm/cmaq_grid/CMAQ2km_47domains.shp')) %>% st_transform(4326)
domain        <- 'SARA2'
two_km_grid   <- two_km_grid[two_km_grid$domain == domain,]
ten_km_grid   <- st_crop(ten_km_grid, two_km_grid)
rm(two_km_grid)
major_roads <- c('motorway', 'motorway link', 'trunk', 'trunk link', 'primary', 'primary link', 'secondary', 'tertiary')
minor_roads <- c('residential', 'service', 'unclassified')
api_list <- c('http://overpass-api.de/api/interpreter',
'https://lz4.overpass-api.de/api/interpreter',
'https://z.overpass-api.de/api/interpreter',
'https://overpass.kumi.systems/api/interpreter')
roads_to_import <- c(major_roads, minor_roads)
## Download the roads in that square, by road type in turn
for (j in 1:length(roads_to_import)){
api_to_use <- sample(1:length(api_list), 1)
set_overpass_url(api_list[api_to_use])
temp_road <- opq(bbox = st_bbox(ten_km_grid)) %>%
add_osm_feature(key = 'highway', value= roads_to_import[j]) %>%
osmdata_sp()
if (nrow(temp_road$osm_lines) > 0) {
temp_road <- st_as_sf(temp_road$osm_lines)
## If columns are missing, add them. Also re-order and change to charaters where needed
if ('maxspeed' %in% names(temp_road))  {} else{temp_road$maxspeed <- NA}
if ('lanes'    %in% names(temp_road))  {} else{temp_road$lanes    <- NA}
if ('highway'  %in% names(temp_road))  {} else{temp_road$highway  <- as.character(roads_to_import[j])}
if ('osm_id'   %in% names(temp_road))  {} else{temp_road$osm_id   <- as.character(row.names(temp_road))}
temp_road <- temp_road[,c('osm_id', 'highway', 'lanes', 'maxspeed', 'geometry')]
temp_road$highway  <- as.character(temp_road$highway)
temp_road$lanes    <- as.character(temp_road$lanes)
temp_road$maxspeed <- as.character(temp_road$maxspeed)
## Bind the roads to the previous roads if they exist
if (!exists('grid_roads')) {grid_roads <- temp_road;} else {grid_roads <- rbind(grid_roads, temp_road)}
rm(temp_road)
}
}
nrow(grid_roads[is.na(grid_roads$lanes),]
)
nrow(grid_roads[is.na(grid_roads$maxspeed),])
grid_roads          <- st_intersection(grid_roads, ten_km_grid)
grid_roads[grid_roads$highway == 'primary'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'primary link'     & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'secondary'        & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'motorway'         & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'motorway link'    & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk'            & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'trunk link'       & is.na(grid_roads$lanes),'lanes'] <- 3
grid_roads[grid_roads$highway == 'tertiary'         & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'residential'      & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'service'          & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'unclassified'     & is.na(grid_roads$lanes),'lanes'] <- 2
grid_roads[grid_roads$highway == 'primary'          & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'primary link'     & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'secondary'        & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'motorway'         & is.na(grid_roads$maxspeed),'maxspeed'] <- 70
grid_roads[grid_roads$highway == 'motorway link'    & is.na(grid_roads$maxspeed),'maxspeed'] <- 70
grid_roads[grid_roads$highway == 'trunk'            & is.na(grid_roads$maxspeed),'maxspeed'] <- 40
grid_roads[grid_roads$highway == 'trunk link'       & is.na(grid_roads$maxspeed),'maxspeed'] <- 40
grid_roads[grid_roads$highway == 'tertiary'         & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'residential'      & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'service'          & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
grid_roads[grid_roads$highway == 'unclassified'     & is.na(grid_roads$maxspeed),'maxspeed'] <- 30
plot(st_geometry(grid_roads))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
library(ka)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
library(knitr)
library(kableExtra)
rm(list=ls())
library(osmdata)
library(tidyverse)
library(sf)
library(mapview)
library(knitr)
library(kableExtra)
plot(st_geometry(grid_roads), col='blue')
grid_roads[,'geometry']
